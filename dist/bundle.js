/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./scripts/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./scripts/country_search.js":
/*!***********************************!*\
  !*** ./scripts/country_search.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("throw new Error(\"Module build failed: SyntaxError: Unterminated string constant (19:11)\\n\\n\\u001b[0m \\u001b[90m 17 | \\u001b[39m\\n \\u001b[90m 18 | \\u001b[39m\\u001b[36mconst\\u001b[39m column \\u001b[33m=\\u001b[39m {\\n\\u001b[31m\\u001b[1m>\\u001b[22m\\u001b[39m\\u001b[90m 19 | \\u001b[39m    float\\u001b[33m:\\u001b[39m \\u001b[32m'left\\u001b[39m\\n \\u001b[90m    | \\u001b[39m           \\u001b[31m\\u001b[1m^\\u001b[22m\\u001b[39m\\n \\u001b[90m 20 | \\u001b[39m    width\\u001b[33m:\\u001b[39m \\u001b[32m'40%'\\u001b[39m\\u001b[33m,\\u001b[39m\\n \\u001b[90m 21 | \\u001b[39m    padding\\u001b[33m:\\u001b[39m \\u001b[32m'20px'\\u001b[39m\\n \\u001b[90m 22 | \\u001b[39m}\\u001b[33m;\\u001b[39m\\u001b[0m\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zY3JpcHRzL2NvdW50cnlfc2VhcmNoLmpzLmpzIiwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./scripts/country_search.js\n");

/***/ }),

/***/ "./scripts/index.js":
/*!**************************!*\
  !*** ./scripts/index.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.svg = exports.parseTime = exports.formatTime = exports.water_stress_pst = exports.water_stress_opt = exports.water_stress_bau = exports.water_stress = exports.water_stress_levels_opt = exports.water_stress_levels_pst = exports.water_stress_levels_bau = exports.water_stress_levels = exports.total_water_used = exports.total_available_water = exports.total_external_water = exports.total_internal_water = undefined;\nexports.showLineChart = showLineChart;\nexports.showMap = showMap;\nexports.getAllValuesForCountry = getAllValuesForCountry;\n\nvar _map = __webpack_require__(/*! ./map */ \"./scripts/map.js\");\n\nvar _slider = __webpack_require__(/*! ./slider */ \"./scripts/slider.js\");\n\nvar _variables = __webpack_require__(/*! ./variables */ \"./scripts/variables.js\");\n\nvar _line_chart = __webpack_require__(/*! ./line_chart */ \"./scripts/line_chart.js\");\n\nvar _country_search = __webpack_require__(/*! ./country_search */ \"./scripts/country_search.js\");\n\nvar total_internal_water = exports.total_internal_water = new Map();\nvar total_external_water = exports.total_external_water = new Map();\nvar total_available_water = exports.total_available_water = new Map();\nvar total_water_used = exports.total_water_used = new Map();\nvar water_stress_levels = exports.water_stress_levels = new Map();\n/////////////////////////////////////////////\nvar water_stress_levels_bau = exports.water_stress_levels_bau = new Map();\nvar water_stress_levels_pst = exports.water_stress_levels_pst = new Map();\nvar water_stress_levels_opt = exports.water_stress_levels_opt = new Map();\n\nvar water_stress = exports.water_stress = [],\n    water_stress_bau = exports.water_stress_bau = [],\n    water_stress_opt = exports.water_stress_opt = [],\n    water_stress_pst = exports.water_stress_pst = [];\n\nvar formatTime = exports.formatTime = d3.timeFormat(\"%Y\");\nvar parseTime = exports.parseTime = d3.timeParse(\"%Y\");\n\n//TODO change this and add proper padding\nvar svg = exports.svg = d3.select(\"body\").append(\"svg\").attr('width', _variables.width + 150).attr('height', _variables.height + 50);\n\nfunction showLineChart() {\n\n    document.getElementById(\"bau\").disabled = false;\n    document.getElementById(\"optimistic\").disabled = false;\n    document.getElementById(\"pessimistic\").disabled = false;\n\n    d3.select('svg').select('#map').attr(\"hidden\", true);\n    d3.select('svg').select('.predictedSliderLabel').attr(\"visibility\", \"hidden\");\n    d3.select('svg').select('.predictedSlider').attr(\"visibility\", \"hidden\");\n    d3.select('svg').select('#slider').attr(\"hidden\", true);\n    d3.select('svg').select('#key').attr(\"hidden\", true);\n    d3.select('svg').select('#line_chart').attr(\"hidden\", null);\n    d3.select('#root').attr(\"display\", \"visible\");\n\n    //    d3.select('svg').select('#map').attr(\"hidden\", true);\n    //    d3.select('svg').select('.predictedSlider').attr(\"visibility\", \"hidden\");\n    //    d3.select('svg').select('#slider').attr(\"hidden\", true);\n    //    d3.select('svg').select('#key').attr(\"hidden\", true);\n    //    d3.select('svg').select('.predictedSliderLabel').attr(\"hidden\", true);\n    //    d3.select('svg').select('.predicted').attr(\"hidden\", true);\n    //    d3.select('svg').select('#line_chart').attr(\"hidden\", null);\n    document.getElementById('add_button').style.visibility = 'visible';\n}\n\nfunction showMap() {\n\n    if (_variables.current_year_global.year.substring(0, 4) === \"2020\" || _variables.current_year_global.year.substring(0, 4) === \"2030\" || _variables.current_year_global.year.substring(0, 4) === \"2040\") {\n        document.getElementById(\"bau\").disabled = false;\n        document.getElementById(\"optimistic\").disabled = false;\n        document.getElementById(\"pessimistic\").disabled = false;\n    } else {\n        document.getElementById(\"bau\").disabled = true;\n        document.getElementById(\"optimistic\").disabled = true;\n        document.getElementById(\"pessimistic\").disabled = true;\n    }\n    d3.select('svg').select('#map').attr(\"hidden\", null);\n    d3.select('svg').select('#slider').attr(\"hidden\", null);\n    d3.select('svg').select('#key').attr(\"hidden\", null);\n    d3.select('svg').select('.predictedSliderLabel').attr(\"hidden\", null);\n    d3.select('svg').select('.predicted').attr(\"hidden\", null);\n    d3.select('svg').select('#line_chart').attr(\"hidden\", true);\n    document.getElementById('add_button').style.visibility = 'hidden';\n}\n\nfunction getAllValuesForCountry(map, country, index_1, index_2) {\n    var values = [];\n    map.forEach(function (value, key) {\n        if (value[country] !== -1) values.push({ date: key.substring(index_1, index_2), value: value[country] });\n    });\n    return { id: country, display: _variables.display_country[country].display, values: values };\n}\n\nfunction loadDataset(map, file, func) {\n    return new Promise(function (resolve, reject) {\n        d3.csv(file, function (data) {\n            data.forEach(function (d) {\n                var values = {};\n                Object.keys(d).forEach(function (key) {\n                    if (key !== 'Year') {\n                        if (+d[key] === 0 || +d[key] === -1) {\n                            values[key.replace(/\\(/g, '').replace(/\\)/g, '').replace(/'/g, '').replace(/ /g, '-')] = -1;\n                        } else {\n                            values[key.replace(/\\(/g, '').replace(/\\)/g, '').replace(/'/g, '').replace(/ /g, '-')] = func(+d[key]);\n                        }\n                    }\n                });\n                map.set(d.Year, values);\n            });\n            resolve();\n        });\n    });\n}\n\nfunction sigmoid(t) {\n    return t * 100;\n    // return 1/(1+Math.pow(Math.E, -t));\n}\n\nPromise.all([loadDataset(water_stress_levels, './Data/stress_levels/water_stress_levels.csv', sigmoid), loadDataset(total_external_water, './Data/water_use/total_external.csv', function (val) {\n    return val;\n}), loadDataset(total_internal_water, './Data/water_use/total_internal.csv', function (val) {\n    return val;\n}), loadDataset(total_water_used, './Data/water_use/total_withdrawn.csv', function (val) {\n    return val;\n}), loadDataset(water_stress_levels_bau, './Data/stress_levels/bau_predictions.csv', sigmoid), loadDataset(water_stress_levels_opt, './Data/stress_levels/opt_predictions.csv', sigmoid), loadDataset(water_stress_levels_pst, './Data/stress_levels/pst_predictions.csv', sigmoid)]).then(function (values) {\n\n    Object.keys(_variables.display_country).forEach(function (d) {\n        water_stress.push(getAllValuesForCountry(water_stress_levels, d, 5, 9));\n        water_stress_bau.push(getAllValuesForCountry(water_stress_levels_bau, d, 0, 4));\n        water_stress_opt.push(getAllValuesForCountry(water_stress_levels_opt, d, 0, 4));\n        water_stress_pst.push(getAllValuesForCountry(water_stress_levels_pst, d, 0, 4));\n    });\n    (0, _map.renderMap)(water_stress_levels.get('1978-1982'), '1978-1982');\n    (0, _slider.createSlider)();\n    (0, _line_chart.renderLineChart)();\n    (0, _country_search.create_modal)();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/index.js\n");

/***/ }),

/***/ "./scripts/line_chart.js":
/*!*******************************!*\
  !*** ./scripts/line_chart.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.updateChart = updateChart;\nexports.renderLineChart = renderLineChart;\n\nvar _index = __webpack_require__(/*! ./index */ \"./scripts/index.js\");\n\nvar utils = _interopRequireWildcard(_index);\n\nvar _variables = __webpack_require__(/*! ./variables */ \"./scripts/variables.js\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar zoom = d3.zoom().scaleExtent([1 / 4, 9]).on('zoom', zoomFunction);\n\n//Add in the\nvar color_asia = d3.scaleThreshold().domain([0, 100, 200, 300, 400, 500, 600]).range(d3.schemeReds[5]);\n\nvar color_north_america = d3.scaleThreshold().domain([0, 100, 200, 300, 400, 500, 600]).range(d3.schemeBlues[5]);\n\nvar color__south_america = d3.scaleThreshold().domain([0, 100, 200, 300, 400, 500, 600]).range(d3.schemeGreens[5]);\n\nvar color_africa = d3.scaleThreshold().domain([0, 100, 200, 300, 400, 500, 600]).range(d3.schemePurples[5]);\n\nvar color_eurpoe = d3.scaleThreshold().domain([0, 100, 200, 300, 400, 500, 600]).range(d3.schemeOranges[5]);\n\nvar color_ocina = d3.scaleThreshold().domain([0, 100, 200, 300, 400, 500, 600]).range(d3.schemePurples[5]);\n\nfunction get_colour_scheme_for_country(country) {\n    var region = _variables.country_contents[country];\n    if (region === 'Asia') return color_asia;else if (region === 'Europe') return color_eurpoe;else if (region === 'Oceania') return color_ocina;else if (region === 'North America') return color_north_america;else if (region === 'South America') return color__south_america;else if (region === 'Africa') return color_africa;\n}\n\n//Sets axis scales\nvar x = d3.scaleTime().range([0, _variables.width - 100]),\n    y = d3.scaleLog().base(Math.E).domain([0.0015, 1000]).range([_variables.height, 0]),\n    z = d3.scaleOrdinal(d3.schemeCategory10);\n\n//Define Axis\nvar xAxis = d3.axisBottom(x).tickPadding(2);\nvar yAxis = d3.axisLeft(y).tickFormat(d3.format(\",.2f\")).tickValues([0.00001, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 500]);\n\nvar formatDecimal = d3.format(\".3f\"),\n    bisectDate = d3.bisector(function (d) {\n    return d.date;\n}).left;\n\nfunction zoomFunction() {\n    //Returns a copy of the continuous scales x and y whose domain is transformed.\n    var new_xScale = d3.event.transform.rescaleX(x);\n    var new_yScale = d3.event.transform.rescaleY(y);\n    //Gets the x and y axis elements in the DOM and invokes a callback function by calling .scale\n    d3.select('g').select('.y-axis').call(yAxis.scale(new_yScale));\n    d3.select('g').select('.x-axis').call(xAxis.scale(new_xScale));\n    //Gets all of the circles on the DOM excluding ones in the key\n    d3.select('g').selectAll('.country').attr('transform', d3.event.transform);\n    d3.select('g').selectAll('.predictedLabel').attr('x', new_xScale(utils.parseTime(2017)));\n    d3.select('g').selectAll('.predicted').attr('x1', new_xScale(utils.parseTime(2017))).attr('x2', new_xScale(utils.parseTime(2017)));\n    d3.select('g').selectAll('circle').filter('.dot').attr('r', 4 / d3.event.transform.k);\n}\n\n//Line generator, where the lives are curved\nvar line = d3.line().x(function (d) {\n    return x(new Date(d.date));\n}).y(function (d) {\n    if (d.value === undefined) return -1;else return y(d.value);\n});\n\n// Define the div for the tooltip\nvar div = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip1\").style(\"opacity\", 0);\n\nfunction tweenDashoffsetOn() {\n    var l = this.getTotalLength(),\n        i = d3.interpolateString('' + l, '0');\n    return function (t) {\n        return i(t);\n    };\n}\n\nfunction drawLines(g, countries, key) {\n    var country = g.selectAll(key).data(countries).enter().append('g').attr('class', 'country').attr('id', function (d) {\n        return d.id.split(' ').join('_');\n    }).on(\"mouseover\", function (data) {\n        div.transition().duration(200).style(\"opacity\", .9);\n        var circleUnderMouse = this;\n        d3.selectAll('.country').style('opacity', function () {\n            return this.id === circleUnderMouse.id ? 1.0 : 0.2;\n        });\n        d3.selectAll('.country').select('.line').style('stroke-width', '1px').filter(function (d) {\n            return d.id === circleUnderMouse.id;\n        }).style('stroke-width', '2px');\n    }).on(\"mouseout\", function (d) {\n        div.transition().duration(500).style(\"opacity\", 0);\n        d3.selectAll('.country').style('opacity', '1');\n        d3.selectAll('.country').select('.line').style('stroke-width', '1px');\n    }).on(\"mousemove\", function (data) {\n        div.html('<b>Country: </b>' + data.id + '<br/>' + '<b>Year:</b> ' + utils.formatTime(x.invert(d3.mouse(this)[0])) + '<br/>' + '<b>Water Stress:</b> ' + formatDecimal(y.invert(d3.mouse(this)[1] - 2)) + '<br/>').style(\"left\", d3.event.pageX + \"px\").style(\"top\", d3.event.pageY - 28 + \"px\");\n    }).style('pointer-events', 'none');\n\n    country.append('path').attr('class', 'line').attr('d', function (d) {\n        return line(d.values);\n    }).attr('fill', 'none').style('stroke', function (d) {\n        return z(d.id);\n    });\n\n    country.append('path').attr('class', 'fat_line').attr('d', function (d) {\n        return line(d.values);\n    }).style('stroke-width', 25);\n\n    country.selectAll(\".dot\").data(function (d) {\n        return d.values;\n    }).enter().append(\"circle\").attr(\"r\", 4).attr(\"cx\", function (d, i) {\n        return x(new Date(d.date));\n    }).attr(\"cy\", function (d) {\n        return y(d.value);\n    }).attr(\"fill\", function (d) {\n        return z(d3.select(this.parentNode).datum().id);\n    }).attr(\"date\", function (d) {\n        return d.date;\n    }).attr(\"val\", function (d) {\n        return d.value;\n    }).style('opacity', '0').filter(function (d) {\n        //Only shows the circles for selected countries\n        return _variables.display_country[d3.select(this.parentNode).datum().id].display;\n    }).style('opacity', '1');\n\n    var paths = country.select('path').each(function () {\n        d3.select(this).attr('stroke-dasharray', this.getTotalLength() + ',' + this.getTotalLength()).attr('stroke-dashoffset', '' + this.getTotalLength());\n    });\n    paths.filter(function (d) {\n        // only shows the lines for selected countries\n        return _variables.display_country[d.id].display;\n    }).transition().duration(2000).attrTween('stroke-dashoffset', tweenDashoffsetOn);\n}\n\nfunction drawAxis(g) {\n\n    //x-axis\n    g.append('g').attr('class', 'x-axis').attr('transform', 'translate(0,' + _variables.height + ')').call(xAxis).append('text').attr('transform', 'translate(' + (_variables.width - 60) + ',' + 30 + ')').attr('fill', '#000').attr('font-size', '12px').text('Year');\n\n    //Y-axis\n    g.append('g').attr('class', 'y-axis').call(yAxis).append('text').attr('transform', 'rotate(-90)').attr('y', 10).attr('dy', '0.80em').attr('fill', '#000');\n\n    g.append(\"text\").attr(\"class\", \"predictedLabel\").attr(\"x\", x(utils.parseTime(2017)) - 25).text(\"Predicted\");\n\n    g.append(\"line\").attr(\"class\", \"predicted\").attr(\"x1\", x(utils.parseTime(2017))).attr(\"x2\", x(utils.parseTime(2017))).attr(\"y1\", 0).attr(\"y2\", _variables.height);\n}\n\nfunction create_domains(data) {\n    x.domain([utils.parseTime('1982'), utils.parseTime('2040')]);\n    y.domain([d3.min(data, function (c) {\n        return d3.min(c.values, function (d) {\n            return d.value;\n        });\n    }), d3.max(data, function (c) {\n        return d3.max(c.values, function (d) {\n            return d.value;\n        });\n    })]);\n    z.domain(data.map(function (c) {\n        return c.id;\n    }));\n}\n\nfunction updateChart(close) {\n    Object.keys(_variables.display_country).forEach(function (key) {\n        var g = d3.selectAll('#' + key);\n        if (close) {\n            g.style('pointer-events', 'auto');\n        } else {\n            if (_variables.display_country[key].display) {\n                g.select('text').transition().duration(1000).style('opacity', 1);\n                g.select('path').style('opacity', '1');\n                g.select('path').transition().duration(2000).attrTween('stroke-dashoffset', tweenDashoffsetOn);\n\n                g.select('circle').transition().duration(2000).attrTween('stroke-dashoffset', tweenDashoffsetOn);\n\n                g.selectAll('circle').style('opacity', '1').style('pointer-events', 'auto');\n                g.style('pointer-events', 'auto');\n            } else {\n                g.selectAll('circle').style('opacity', '0').style('pointer-events', 'none');\n                g.style('pointer-events', 'none');\n                g.select('text').style('opacity', '0');\n                g.select('path').style('opacity', '0');\n            }\n            /*if (display_country[key].display) {\n                g.select('text')\n                    .transition()\n                    .duration(1000)\n                    .style('opacity', 1);\n                g.select('path').style('opacity', '1');\n                g.select('path').transition()\n                    .duration(2000)\n                    .attrTween('stroke-dashoffset', tweenDashoffsetOn);\n                 g.select('circle').transition()\n                    .duration(2000)\n                    .attrTween('stroke-dashoffset', tweenDashoffsetOn);\n                 g.selectAll('circle').style('opacity', '1').style('pointer-events', 'auto');\n                g.style('pointer-events', 'auto');\n                // d3.select('#line_chart').style('pointer-events', 'auto');\n            } else {\n                g.selectAll('circle').style('opacity', '0');\n                g.style('pointer-events', 'none');\n                 d3.select('#line_chart').style('pointer-events', 'none');\n                d3.select('#line_chart').select('.back2Map_button').style('pointer-events', 'auto');\n                g.select('text').style('opacity', '0');\n                g.select('path').style('opacity', '0');\n            }*/\n        }\n    });\n}\n\nfunction renderLineChart() {\n\n    var g = utils.svg.append('g').attr('id', 'line_chart').attr('transform', 'translate(' + _variables.margin.left + ',' + _variables.margin.top + ')').attr(\"hidden\", true);\n    // .call(zoom);\n\n    g.append(\"rect\").attr(\"class\", \"back2Map_button\").attr(\"transform\", \"translate(\" + 1150 + \",\" + 0 + \")\").attr('width', 100).attr('height', 50).attr('fill', 'lightgrey').on('click', function () {\n        // toggle visibility\n        d3.select('svg').select('.predictedSliderLabel').attr(\"visibility\", \"visible\");\n        d3.select('svg').select('.predictedSlider').attr(\"visibility\", \"visible\");\n        d3.select('#root').attr(\"display\", \"hidden\");\n        Object.keys(_variables.display_country).forEach(function (key) {\n            _variables.display_country[key].display = false;\n        });\n        updateChart(true);\n        utils.showMap();\n    });\n\n    g.append(\"text\").attr(\"id\", \"back_button_text\").attr(\"transform\", \"translate(\" + 1185 + \",\" + 30 + \")\").text(\"Back\");\n\n    create_domains(utils.water_stress);\n    drawAxis(g);\n    drawLines(g, utils.water_stress, '.country');\n    drawLines(g, utils.water_stress_bau, '.country_bau');\n    drawLines(g, utils.water_stress_opt, '.country_opt');\n    drawLines(g, utils.water_stress_pst, '.country_pst');\n    updateChart();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/line_chart.js\n");

/***/ }),

/***/ "./scripts/map.js":
/*!************************!*\
  !*** ./scripts/map.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.futureOptions = exports.color = exports.path = exports.projection = undefined;\nexports.renderMap = renderMap;\nexports.updateMap = updateMap;\nexports.bau = bau;\nexports.optimistic = optimistic;\nexports.pessimistic = pessimistic;\n\nvar _index = __webpack_require__(/*! ./index */ \"./scripts/index.js\");\n\nvar utils = _interopRequireWildcard(_index);\n\nvar _variables = __webpack_require__(/*! ./variables */ \"./scripts/variables.js\");\n\nvar _line_chart = __webpack_require__(/*! ./line_chart */ \"./scripts/line_chart.js\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar projection = exports.projection = d3.geoMiller().scale(150).translate([_variables.width / 2, _variables.height / 1.8]);\n\nvar path = exports.path = d3.geoPath().projection(projection);\n\nvar xPos = [440, 520, 600, 680, 760];\n//\nvar scale = d3.scaleLinear().domain([0, 500]).range([440, 840]);\n\nvar color = exports.color = d3.scaleThreshold().domain([0, 100, 200, 300, 400, 500]).range(d3.schemeReds[6]);\n\nvar xDensity = d3.scaleSqrt().domain([0, 500]).rangeRound([440, 760]);\n\nvar map = void 0;\n\nvar div_tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n\nvar colours = {};\n\nvar futureOptions = exports.futureOptions = \"bau\";\n\nfunction renderMap(data, year) {\n    d3.json('./Data/countries.geojson', function (error, mapData) {\n        var features = mapData.features;\n        map = utils.svg.append('g').attr('id', 'map').attr('class', 'countries').attr(\"transform\", \"translate(50,0)\").selectAll('path').data(features).enter().append('path').attr('d', path).attr('id', function (d) {\n            return d.properties.name;\n        }).style('stroke', \"#FFF\").style('fill', function (d) {\n            var value = data[d.properties.name];\n            if (value === 0 || value === -1 || value === undefined) return \"#ccc\";else {\n                var c = color(data[d.properties.name]);\n                var country_names = void 0;\n                if (colours[c] === undefined) country_names = [];else country_names = colours[c];\n                country_names.push(d.properties.name);\n                colours[c] = country_names;\n                return c;\n            }\n        }).on(\"mouseover\", function (d) {\n            var country_name = d.properties.name;\n            if (data[d.properties.name] !== 0 && data[d.properties.name] !== -1 && data[d.properties.name] !== undefined) {\n                d3.select(this).style(\"fill\", \"orange\");\n                toolTip(d, data, year);\n            }\n        }).on(\"mouseout\", function (d) {\n            if (data[d.properties.name] !== 0 && data[d.properties.name] !== -1 && data[d.properties.name] !== undefined) {\n                tooltip_go_invisible();\n                d3.select(this).style(\"fill\", function (d) {\n                    var c = color(data[d.properties.name]);\n                    return c;\n                });\n            }\n        }).on(\"click\", function (d) {\n            if (data[d.properties.name] !== 0 && data[d.properties.name] !== -1 && data[d.properties.name] !== undefined) {\n                var country_name = d.properties.name;\n                _variables.display_country[country_name].display = true;\n                (0, _line_chart.updateChart)(false);\n                utils.showLineChart();\n            }\n        });\n    });\n\n    legend(colours);\n    bau();\n    optimistic();\n    pessimistic();\n}\n\nfunction updateMap(data, year) {\n\n    colours = {};\n    map.transition().duration(1000).style(\"fill\", function (d) {\n        //Get data value\n        var value = data[d.properties.name];\n        if (value === 0 || value === -1 || value === undefined) return \"#ccc\";else {\n            var c = color(data[d.properties.name]);\n            var country_names = void 0;\n            if (colours[c] === undefined) country_names = [];else country_names = colours[c];\n            country_names.push(d.properties.name);\n            colours[c] = country_names;\n            return c;\n        }\n    });\n\n    map.on(\"mouseover\", function (d) {\n        var country_name = d.properties.name;\n        if (data[d.properties.name] !== 0 && data[d.properties.name] !== -1 && data[d.properties.name] !== undefined) {\n            d3.select(this).style(\"fill\", \"orange\");\n            toolTip(d, data, year);\n        }\n    }).on(\"mouseout\", function (d) {\n        if (data[d.properties.name] !== 0 && data[d.properties.name] !== -1 && data[d.properties.name] !== undefined) {\n            tooltip_go_invisible();\n            d3.select(this).style(\"fill\", function (d) {\n                var c = color(data[d.properties.name]);\n                return c;\n            });\n        }\n    }).on(\"click\", function (d) {\n        if (data[d.properties.name] !== 0 && data[d.properties.name] !== -1 && data[d.properties.name] !== undefined) {\n            var country_name = d.properties.name;\n            console.log(\"clicked: \" + country_name);\n            _variables.display_country[country_name].display = true;\n            (0, _line_chart.updateChart)(false);\n            utils.showLineChart();\n        }\n    });\n\n    legend(colours);\n}\n\nfunction toolTip(d, data, year) {\n    var total_water_used = utils.total_water_used;\n    var total_internal_water = utils.total_internal_water;\n    var total_external_water = utils.total_external_water;\n\n    var water_stress_levels_bau = utils.water_stress_levels_bau;\n    var water_stress_levels_pst = utils.water_stress_levels_pst;\n    var water_stress_levels_opt = utils.water_stress_levels_opt;\n\n    if (year !== '2020' && year !== '2030' && year !== '2040') {\n        var country_name = d.properties.name;\n        var stressLevel = Math.round(data[country_name] * 100) / 100;\n        var country_water_used = Math.round(total_water_used.get(year)[country_name] * 100) / 100;\n        var country_internal_water = Math.round(total_internal_water.get(year)[country_name] * 100) / 100;\n        var country_external_water = Math.round(total_external_water.get(year)[country_name] * 100) / 100;\n\n        div_tooltip.transition() //here\n        .duration(200).style(\"opacity\", .9);\n        div_tooltip.html(country_name + '<div class=\"tooltip_info_box\" >' + '<div class=\"tooltip_titles\" ><p>' + \"Stress Level\" + '</p>' + '<br/>' + '<p>' + 'Total Water Used' + '</p>' + '<br/>' + '<p>' + 'Total Internal Water' + '</p>' + '<br/>' + '<p>' + 'Total External Water' + '</p>' + '<br/>' + '<p>' + 'Year' + '</p>' + '</div>' + '<div class=\"tooltip_info\" ><p>' + stressLevel + '</p>' + '<br/>' + '<p>' + country_water_used + \" m3\" + '</p>' + '<br/>' + '<p>' + country_internal_water + \" m3\" + '</p>' + '<br/>' + '<p>' + country_external_water + \" m3\" + '</p>' + '<br/>' + '<p>' + year + '</p>' + '</div>' + '</div>').style(\"left\", 20 + \"px\").style(\"top\", _variables.height - 30 + \"px\");\n    } else {\n        var _country_name = d.properties.name;\n        var _stressLevel = Math.round(data[_country_name] * 100) / 100;\n        console.log(water_stress_levels_bau);\n\n        if (futureOptions === 'bau') {\n            _stressLevel = Math.round(water_stress_levels_bau.get(year)[_country_name] * 100) / 100;\n        } else if (futureOptions === 'optimistic') {\n            _stressLevel = Math.round(water_stress_levels_opt.get(year)[_country_name] * 100) / 100;\n        } else if (futureOptions === 'pessimistic') {\n            _stressLevel = Math.round(water_stress_levels_pst.get(year)[_country_name] * 100) / 100;\n        }\n\n        div_tooltip.transition() //here\n        .duration(200).style(\"opacity\", .9);\n        div_tooltip.html(_country_name + '<div class=\"tooltip_info_box\" >' + '<div class=\"tooltip_titles\" ><p>' + \"Stress Level\" + '</p>' + '<br/>' + '<p>' + 'Year' + '</p>' + '</div>' + '<div class=\"tooltip_info\" ><p>' + _stressLevel + '</p>' + '<br/>' + '<p>' + year + '</p>' + '</div>' + '</div>').style(\"left\", 20 + \"px\").style(\"top\", _variables.height - 30 + \"px\");\n    }\n}\n\nfunction tooltip_go_invisible() {\n    div_tooltip.transition().duration(200).style(\"opacity\", 0.0);\n}\n\nfunction legend(c) {\n\n    var colours = c;\n    //Define legend\n    var legend = utils.svg.append(\"g\").attr(\"id\", \"key\").attr(\"transform\", \"translate(40,550)\");\n\n    //Setting up the legend\n    legend.selectAll(\"rect\").data(color.range().map(function (d) {\n        //mapping the color density value to the domain according to the data\n        //invert extent return all the values in the domain that corresponds the range\n        //looping through the domain, setting the range between each color bar\n        d = color.invertExtent(d);\n        if (d[0] == null) d[0] = xDensity.domain()[0]; //get the first and second value, storing then in the map\n        if (d[1] == null) d[1] = xDensity.domain()[1]; //this gets the range between each tick\n        return d;\n    })).enter().append(\"rect\").attr('id', function (d) {\n        return color(d[0]);\n    }).attr(\"height\", 8) //this creates the color bars between the values\n    .attr(\"x\", function (d) {\n        return xPos[d[0] / 100];\n    }).attr(\"width\", 80).attr(\"fill\", function (d) {\n        return color(d[0]);\n    }).on(\"mouseover\", function (d) {\n        var previousElement = d3.select(this);\n        for (var key in colours) {\n            if (previousElement.attr(\"fill\") === key) {\n                previousElement.style(\"fill\", \"#000080\");\n                for (var i = 0; i < colours[key].length; i++) {\n                    d3.select('svg').select('#map').select('#' + colours[key][i]).style(\"fill\", \"#000080\");\n                }\n            }\n        }\n    }).on(\"mouseout\", function (d) {\n        var previousElement = d3.select(this);\n        for (var key in colours) {\n            if (previousElement.attr(\"fill\") === key) {\n                previousElement.style(\"fill\", key);\n                for (var i = 0; i < colours[key].length; i++) {\n                    d3.select('svg').select('#map').select('#' + colours[key][i]).style(\"fill\", key);\n                }\n            }\n        }\n    });\n\n    //adding the data value title\n    legend.append(\"text\").attr(\"class\", \"caption\").attr(\"x\", xDensity.range()[0]).attr(\"y\", -6).attr(\"fill\", \"#000\").attr(\"text-anchor\", \"start\").attr(\"font-weight\", \"bold\").text(\"Water Stress Score\");\n\n    //adding the value of the domain in the legend, creating the x axis using the x scale created for the data\n    //tick size is 13 so all the values of the domain will appear on page\n    legend.call(d3.axisBottom(scale).tickSize(13).tickValues(color.domain())).select(\".domain\").remove();\n}\n\nfunction bau(data, year) {\n\n    d3.select('#bau').on(\"click\", function (d) {\n        exports.futureOptions = futureOptions = 'bau';\n        console.log(\"bau\");\n        d3.select('svg').select('#key').remove();\n        updateMap(data, year);\n        //call updateData\n    });\n}\n\nfunction optimistic(data, year) {\n\n    d3.select('#optimistic').on(\"click\", function (d) {\n        exports.futureOptions = futureOptions = 'optimistic';\n        console.log(\"optimistic\");\n        d3.select('svg').select('#key').remove();\n        updateMap(data, year);\n        //call updateData\n    });\n}\n\nfunction pessimistic(data, year) {\n\n    d3.select('#pessimistic').on(\"click\", function (d) {\n        exports.futureOptions = futureOptions = 'pessimistic';\n        console.log(\"pessimistic\");\n        d3.select('svg').select('#key').remove();\n        updateMap(data, year);\n        //call updateData\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/map.js\n");

/***/ }),

/***/ "./scripts/slider.js":
/*!***************************!*\
  !*** ./scripts/slider.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createSlider = createSlider;\n\nvar _index = __webpack_require__(/*! ./index */ \"./scripts/index.js\");\n\nvar utils = _interopRequireWildcard(_index);\n\nvar _variables = __webpack_require__(/*! ./variables */ \"./scripts/variables.js\");\n\nvar _map = __webpack_require__(/*! ./map */ \"./scripts/map.js\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction createSlider() {\n\n    var data3 = d3.range(0, Object.keys(_variables.years).length).map(function (d) {\n        return new Date(Object.keys(_variables.years)[d], 10, 3);\n    });\n\n    var slider3 = d3.sliderHorizontal().min(d3.min(data3)).max(d3.max(data3)).width(400).tickFormat(d3.timeFormat('%Y')).tickValues(data3).on('onchange', function (val) {\n        d3.select('svg').select('#key').remove();\n        var keys = Object.keys(_variables.years);\n        var current_year = _variables.years[keys.reverse().find(function (e) {\n            return e <= utils.formatTime(val);\n        })];\n        if (current_year === \"2020\" || current_year === \"2030\" || current_year === \"2040\") {\n            d3.select('svg').select('#slider').select('.slider').select('.parameter-value').select('path').style('fill', '#8b0000');\n\n            document.getElementById(\"bau\").disabled = false;\n            document.getElementById(\"optimistic\").disabled = false;\n            document.getElementById(\"pessimistic\").disabled = false;\n\n            (0, _map.updateMap)(utils.water_stress_levels_bau.get(current_year), current_year);\n\n            (0, _map.bau)(utils.water_stress_levels_bau.get(current_year), current_year);\n            (0, _map.optimistic)(utils.water_stress_levels_opt.get(current_year), current_year);\n            (0, _map.pessimistic)(utils.water_stress_levels_pst.get(current_year), current_year);\n        } else {\n            d3.select('svg').select('#slider').select('.slider').select('.parameter-value').select('path').style('fill', 'white');\n\n            document.getElementById(\"bau\").disabled = true;\n            document.getElementById(\"optimistic\").disabled = true;\n            document.getElementById(\"pessimistic\").disabled = true;\n            _variables.current_year_global.year = current_year;\n\n            (0, _map.updateMap)(utils.water_stress_levels.get(current_year), current_year);\n        }\n    });\n\n    utils.svg.append('g').attr('id', 'slider').attr(\"transform\", \"translate(480\" + \", \" + _variables.height + \")\").attr('width', _variables.slider_width).attr('height', _variables.slider_height).call(slider3);\n\n    utils.svg.append('g').append(\"text\").attr(\"class\", \"predictedSliderLabel\").attr(\"x\", 739).attr(\"y\", 580).text(\"Predicted\");\n\n    utils.svg.append('g').append(\"line\").attr(\"class\", \"predictedSlider\").attr(\"x1\", 739).attr(\"x2\", 739).attr(\"y1\", 620).attr(\"y2\", 580);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zY3JpcHRzL3NsaWRlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zY3JpcHRzL3NsaWRlci5qcz84YjkwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge3dpZHRoLCBoZWlnaHQsIHNsaWRlcl9oZWlnaHQsIHNsaWRlcl93aWR0aCwgeWVhcnMsIHBhZGRpbmcsIGN1cnJlbnRfeWVhcl9nbG9iYWx9IGZyb20gXCIuL3ZhcmlhYmxlc1wiO1xuaW1wb3J0IHt1cGRhdGVNYXAsIGZ1dHVyZU9wdGlvbnMsIGJhdSwgb3B0aW1pc3RpYywgcGVzc2ltaXN0aWN9IGZyb20gXCIuL21hcFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2xpZGVyKCkge1xuXG4gICAgY29uc3QgZGF0YTMgPVxuICAgICAgICBkMy5yYW5nZSgwLCBPYmplY3Qua2V5cyh5ZWFycykubGVuZ3RoKS5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShPYmplY3Qua2V5cyh5ZWFycylbZF0sIDEwLCAzKTtcbiAgICAgICAgfSk7XG5cbiAgICBjb25zdCBzbGlkZXIzID0gZDMuc2xpZGVySG9yaXpvbnRhbCgpXG4gICAgICAgIC5taW4oZDMubWluKGRhdGEzKSlcbiAgICAgICAgLm1heChkMy5tYXgoZGF0YTMpKVxuICAgICAgICAud2lkdGgoNDAwKVxuICAgICAgICAudGlja0Zvcm1hdChkMy50aW1lRm9ybWF0KCclWScpKVxuICAgICAgICAudGlja1ZhbHVlcyhkYXRhMylcbiAgICAgICAgLm9uKCdvbmNoYW5nZScsIHZhbCA9PiB7XG4gICAgICAgICAgICBkMy5zZWxlY3QoJ3N2ZycpLnNlbGVjdCgnI2tleScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyh5ZWFycyk7XG4gICAgICAgICAgICBsZXQgY3VycmVudF95ZWFyID0geWVhcnNba2V5cy5yZXZlcnNlKCkuZmluZChlID0+IGUgPD0gdXRpbHMuZm9ybWF0VGltZSh2YWwpKV07XG4gICAgICAgICAgICBpZihjdXJyZW50X3llYXIgPT09IFwiMjAyMFwiIHx8IGN1cnJlbnRfeWVhciA9PT0gXCIyMDMwXCIgfHwgY3VycmVudF95ZWFyID09PSBcIjIwNDBcIil7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KCdzdmcnKVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KCcjc2xpZGVyJylcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdCgnLnNsaWRlcicpXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoJy5wYXJhbWV0ZXItdmFsdWUnKVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KCdwYXRoJylcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgJyM4YjAwMDAnKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhdVwiKS5kaXNhYmxlZD1mYWxzZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm9wdGltaXN0aWNcIikuZGlzYWJsZWQ9ZmFsc2U7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwZXNzaW1pc3RpY1wiKS5kaXNhYmxlZD1mYWxzZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB1cGRhdGVNYXAodXRpbHMud2F0ZXJfc3RyZXNzX2xldmVsc19iYXUuZ2V0KGN1cnJlbnRfeWVhciksIGN1cnJlbnRfeWVhcik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYmF1KHV0aWxzLndhdGVyX3N0cmVzc19sZXZlbHNfYmF1LmdldChjdXJyZW50X3llYXIpLCBjdXJyZW50X3llYXIpO1xuICAgICAgICAgICAgICAgIG9wdGltaXN0aWModXRpbHMud2F0ZXJfc3RyZXNzX2xldmVsc19vcHQuZ2V0KGN1cnJlbnRfeWVhciksIGN1cnJlbnRfeWVhcik7XG4gICAgICAgICAgICAgICAgcGVzc2ltaXN0aWModXRpbHMud2F0ZXJfc3RyZXNzX2xldmVsc19wc3QuZ2V0KGN1cnJlbnRfeWVhciksIGN1cnJlbnRfeWVhcik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KCdzdmcnKVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KCcjc2xpZGVyJylcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdCgnLnNsaWRlcicpXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoJy5wYXJhbWV0ZXItdmFsdWUnKVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KCdwYXRoJylcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgJ3doaXRlJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXVcIikuZGlzYWJsZWQ9dHJ1ZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm9wdGltaXN0aWNcIikuZGlzYWJsZWQ9dHJ1ZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBlc3NpbWlzdGljXCIpLmRpc2FibGVkPXRydWU7XG4gICAgICAgICAgICAgICAgY3VycmVudF95ZWFyX2dsb2JhbC55ZWFyID0gY3VycmVudF95ZWFyO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHVwZGF0ZU1hcCh1dGlscy53YXRlcl9zdHJlc3NfbGV2ZWxzLmdldChjdXJyZW50X3llYXIpLCBjdXJyZW50X3llYXIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgdXRpbHMuc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdpZCcsICdzbGlkZXInKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSg0ODBcIiArIFwiLCBcIiArIChoZWlnaHQpICsgXCIpXCIpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHNsaWRlcl93aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHNsaWRlcl9oZWlnaHQpXG4gICAgICAgIC5jYWxsKHNsaWRlcjMpO1xuICAgIFxuICAgIHV0aWxzLnN2Zy5hcHBlbmQoJ2cnKS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJwcmVkaWN0ZWRTbGlkZXJMYWJlbFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgNzM5KVxuICAgICAgICAuYXR0cihcInlcIiwgNTgwKVxuICAgICAgICAudGV4dChcIlByZWRpY3RlZFwiKTtcbiAgICBcbiAgICB1dGlscy5zdmcuYXBwZW5kKCdnJykuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwicHJlZGljdGVkU2xpZGVyXCIpXG4gICAgICAgIC5hdHRyKFwieDFcIiwgNzM5KVxuICAgICAgICAuYXR0cihcIngyXCIsIDczOSlcbiAgICAgICAgLmF0dHIoXCJ5MVwiLCA2MjApXG4gICAgICAgIC5hdHRyKFwieTJcIiwgNTgwKTtcblxuICAgIFxufVxuXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUE7QUFDQTtBQUxBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBS0E7QUFRQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./scripts/slider.js\n");

/***/ }),

/***/ "./scripts/variables.js":
/*!******************************!*\
  !*** ./scripts/variables.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar width = exports.width = 1200,\n    height = exports.height = 600;\nvar slider_width = exports.slider_width = 500,\n    slider_height = exports.slider_height = 100;\nvar padding = exports.padding = 40;\nvar margin = exports.margin = { top: 20, right: 80, bottom: 30, left: 70 };\n\nvar current_year_global = exports.current_year_global = { year: '1978-1982' };\n\nvar years = exports.years = {\n    1978: '1978-1982',\n    1983: '1983-1987',\n    1988: '1988-1992',\n    1993: '1993-1997',\n    1998: '1998-2002',\n    2003: '2003-2007',\n    2008: '2008-2012',\n    2013: '2013-2017',\n    2018: '2020',\n    2030: '2030',\n    2040: '2040'\n};\n\nvar display_country = exports.display_country = {\n    'Afghanistan': { display: false },\n    'Albania': { display: false },\n    'Algeria': { display: false },\n    'Angola': { display: false },\n    'Argentina': { display: false },\n    'Armenia': { display: false },\n    'Australia': { display: false },\n    'Austria': { display: false },\n    'Azerbaijan': { display: false },\n    'Bahrain': { display: false },\n    'Bangladesh': { display: false },\n    'Belarus': { display: false },\n    'Belgium': { display: false },\n    'Belize': { display: false },\n    'Benin': { display: false },\n    'Bhutan': { display: false },\n    'Bolivia': { display: false },\n    'Bosnia-and-Herzegovina': { display: false },\n    'Botswana': { display: false },\n    'Brazil': { display: false },\n    'Brunei': { display: false },\n    'Bulgaria': { display: false },\n    'Burkina-Faso': { display: false },\n    'Burundi': { display: false },\n    'Cambodia': { display: false },\n    'Cameroon': { display: false },\n    'Canada': { display: false },\n    'Central-African-Republic': { display: false },\n    'Chad': { display: false },\n    'Chile': { display: false },\n    'China': { display: false },\n    'Colombia': { display: false },\n    'Congo': { display: false },\n    'Costa-Rica': { display: false },\n    'Croatia': { display: false },\n    'Cuba': { display: false },\n    'Czech-Republic': { display: false },\n    'North-Korea': { display: false },\n    'Republic-of-the-Congo': { display: false },\n    'Denmark': { display: false },\n    'Djibouti': { display: false },\n    'Dominican-Republic': { display: false },\n    'Ecuador': { display: false },\n    'Egypt': { display: false },\n    'El-Salvador': { display: false },\n    'Equatorial-Guinea': { display: false },\n    'Eritrea': { display: false },\n    'Estonia': { display: false },\n    'Ethiopia': { display: false },\n    'Finland': { display: false },\n    'France': { display: false },\n    'Gabon': { display: false },\n    'Gambia': { display: false },\n    'Georgia': { display: false },\n    'Germany': { display: false },\n    'Ghana': { display: false },\n    'Greece': { display: false },\n    'Guatemala': { display: false },\n    'Guinea': { display: false },\n    'Guinea-Bissau': { display: false },\n    'Guyana': { display: false },\n    'Haiti': { display: false },\n    'Honduras': { display: false },\n    'Hungary': { display: false },\n    'Iceland': { display: false },\n    'India': { display: false },\n    'Indonesia': { display: false },\n    'Iran': { display: false },\n    'Iraq': { display: false },\n    'Ireland': { display: false },\n    'Israel': { display: false },\n    'Italy': { display: false },\n    'Japan': { display: false },\n    'Jordan': { display: false },\n    'Kazakhstan': { display: false },\n    'Kenya': { display: false },\n    'Kyrgyzstan': { display: false },\n    'Laos': { display: false },\n    'Latvia': { display: false },\n    'Lebanon': { display: false },\n    'Lesotho': { display: false },\n    'Liberia': { display: false },\n    'Libya': { display: false },\n    'Lithuania': { display: false },\n    'Luxembourg': { display: false },\n    'Madagascar': { display: false },\n    'Malawi': { display: false },\n    'Malaysia': { display: false },\n    'Mali': { display: false },\n    'Mauritania': { display: false },\n    'Mexico': { display: false },\n    'Mongolia': { display: false },\n    'Morocco': { display: false },\n    'Mozambique': { display: false },\n    'Myanmar': { display: false },\n    'Namibia': { display: false },\n    'Nepal': { display: false },\n    'Netherlands': { display: false },\n    'New-Zealand': { display: false },\n    'Nicaragua': { display: false },\n    'Niger': { display: false },\n    'Nigeria': { display: false },\n    'Norway': { display: false },\n    'Palestine': { display: false },\n    'Oman': { display: false },\n    'Pakistan': { display: false },\n    'Panama': { display: false },\n    'Papua-New-Guinea': { display: false },\n    'Paraguay': { display: false },\n    'Peru': { display: false },\n    'Philippines': { display: false },\n    'Poland': { display: false },\n    'Portugal': { display: false },\n    'Qatar': { display: false },\n    'South-Korea': { display: false },\n    'Moldova': { display: false },\n    'Romania': { display: false },\n    'Russia': { display: false },\n    'Rwanda': { display: false },\n    'Saudi-Arabia': { display: false },\n    'Senegal': { display: false },\n    'Serbia': { display: false },\n    'Sierra-Leone': { display: false },\n    'Slovakia': { display: false },\n    'Slovenia': { display: false },\n    'Somalia': { display: false },\n    'South-Africa': { display: false },\n    'South-Sudan': { display: false },\n    'Spain': { display: false },\n    'Sri-Lanka': { display: false },\n    'Sudan': { display: false },\n    'Suriname': { display: false },\n    'Swaziland': { display: false },\n    'Sweden': { display: false },\n    'Switzerland': { display: false },\n    'Syria': { display: false },\n    'Tajikistan': { display: false },\n    'Thailand': { display: false },\n    'Macedonia': { display: false },\n    'Timor-Leste': { display: false },\n    'Togo': { display: false },\n    'Tunisia': { display: false },\n    'Turkey': { display: false },\n    'Turkmenistan': { display: false },\n    'Uganda': { display: false },\n    'Ukraine': { display: false },\n    'United-Arab-Emirates': { display: false },\n    'United-Kingdom': { display: false },\n    'United-Republic-of-Tanzania': { display: false },\n    'United-States-of-America': { display: false },\n    'Uruguay': { display: false },\n    'Uzbekistan': { display: false },\n    'Venezuela': { display: false },\n    'Vietnam': { display: false },\n    'Yemen': { display: false },\n    'Zambia': { display: false },\n    'Zimbabwe': { display: false }\n};\n\nvar contents = ['Asia', 'Europe', 'Oceania', 'North America', 'South America'];\n\nvar colour_scheme_for_region = {\n    'Asia': '#FF0000',\n    'Europe': '#FFFF00',\n    'Oceania': '#80FF00',\n    'North America': '#0000FF',\n    'South America': '#CC00CC'\n};\n\nvar country_contents = exports.country_contents = {\n    'Afghanistan': 'Asia',\n    'Albania': 'Europe',\n    'Algeria': 'Africa',\n    'Angola': 'Africa',\n    'Argentina': 'South America',\n    'Armenia': 'Asia',\n    'Australia': 'Oceania',\n    'Austria': 'Europe',\n    'Azerbaijan': 'Asia',\n    'Bahrain': 'Asia',\n    'Bangladesh': 'Asia',\n    'Belarus': 'Europe',\n    'Belgium': 'Europe',\n    'Belize': 'North America',\n    'Benin': 'Africa',\n    'Bhutan': 'Asia',\n    'Bolivia': 'South America',\n    'Bosnia-and-Herzegovina': 'Europe',\n    'Botswana': 'Africa',\n    'Brazil': 'South America',\n    'Brunei': 'Asia',\n    'Bulgaria': 'Europe',\n    'Burkina-Faso': 'Africa',\n    'Burundi': 'Africa',\n    'Cambodia': 'Asia',\n    'Cameroon': 'Africa',\n    'Canada': 'North America',\n    'Central-African-Republic': 'Africa',\n    'Chad': 'Africa',\n    'Chile': 'South America',\n    'China': 'Asia',\n    'Colombia': 'South America',\n    'Congo': 'Africa',\n    'Costa-Rica': 'North America',\n    'Croatia': 'Europe',\n    'Cuba': 'North America',\n    'Czech-Republic': 'Europe',\n    'Republic-of-the-Congo': 'Africa',\n    'Denmark': 'Europe',\n    'Djibouti': 'Africa',\n    'Dominican-Republic': 'North America',\n    'Ecuador': 'South America',\n    'Egypt': 'Africa',\n    'El-Salvador': 'North America',\n    'Equatorial-Guinea': 'Africa',\n    'Eritrea': 'Africa',\n    'Estonia': 'Europe',\n    'Ethiopia': 'Africa',\n    'Finland': 'Europe',\n    'France': 'Europe',\n    'Gabon': 'Africa',\n    'Gambia': 'Africa',\n    'Georgia': 'Asia',\n    'Germany': 'Europe',\n    'Ghana': 'Africa',\n    'Greece': 'Europe',\n    'Guatemala': 'North America',\n    'Guinea': 'Africa',\n    'Guinea-Bissau': 'Africa',\n    'Guyana': 'South America',\n    'Haiti': 'North America',\n    'Honduras': 'North America',\n    'Hungary': 'Europe',\n    'Iceland': 'Europe',\n    'India': 'Asia',\n    'Indonesia': 'Asia',\n    'Iran': 'Asia',\n    'Iraq': 'Asia',\n    'Ireland': 'Europe',\n    'Israel': 'Asia',\n    'Italy': 'Europe',\n    'Japan': 'Asia',\n    'Jordan': 'Asia',\n    'Kazakhstan': 'Asia',\n    'Kenya': 'Africa',\n    'Kyrgyzstan': 'Asia',\n    'Laos': 'Asia',\n    'Latvia': 'Europe',\n    'Lebanon': 'Asia',\n    'Lesotho': 'Africa',\n    'Liberia': 'Africa',\n    'Libya': 'Africa',\n    'Lithuania': 'Europe',\n    'Luxembourg': 'Europe',\n    'Macedonia': 'Europe',\n    'Madagascar': 'Africa',\n    'Malawi': 'Africa',\n    'Malaysia': 'Asia',\n    'Mali': 'Africa',\n    'Mauritania': 'Africa',\n    'Mexico': 'North America',\n    'Moldova': 'Europe',\n    'Mongolia': 'Asia',\n    'Morocco': 'Africa',\n    'Mozambique': 'Africa',\n    'Myanmar': 'Asia',\n    'Namibia': 'Africa',\n    'Nepal': 'Asia',\n    'Netherlands': 'Europe',\n    'New-Zealand': 'Oceania',\n    'Nicaragua': 'North America',\n    'Niger': 'Africa',\n    'Nigeria': 'Africa',\n    'North-Korea': 'Asia',\n    'Norway': 'Europe',\n    'Oman': 'Asia',\n    'Pakistan': 'Asia',\n    'Palestine': 'Asia',\n    'Panama': 'North America',\n    'Papua-New-Guinea': 'Oceania',\n    'Paraguay': 'South America',\n    'Peru': 'South America',\n    'Philippines': 'Asia',\n    'Poland': 'Europe',\n    'Portugal': 'Europe',\n    'Qatar': 'Asia',\n    'Romania': 'Europe',\n    'Russia': 'Europe',\n    'Rwanda': 'Africa',\n    'Saudi-Arabia': 'Asia',\n    'Senegal': 'Africa',\n    'Serbia': 'Europe',\n    'Sierra-Leone': 'Africa',\n    'Slovakia': 'Europe',\n    'Slovenia': 'Europe',\n    'Somalia': 'Africa',\n    'South-Africa': 'Africa',\n    'South-Korea': 'Asia',\n    'South-Sudan': 'Africa',\n    'Spain': 'Europe',\n    'Sri-Lanka': 'Asia',\n    'Sudan': 'Africa',\n    'Suriname': 'South America',\n    'Swaziland': 'Africa',\n    'Sweden': 'Europe',\n    'Switzerland': 'Europe',\n    'Syria': 'Asia',\n    'Tajikistan': 'Asia',\n    'United-Republic-of-Tanzania': 'Africa',\n    'Thailand': 'Asia',\n    'Timor-Leste': 'Asia',\n    'Togo': 'Africa',\n    'Tunisia': 'Africa',\n    'Turkey': 'Asia',\n    'Turkmenistan': 'Asia',\n    'Uganda': 'Africa',\n    'Ukraine': 'Europe',\n    'United-Arab-Emirates': 'Asia',\n    'United-Kingdom': 'Europe',\n    'United-States-of-America': 'North America',\n    'Uruguay': 'South America',\n    'Uzbekistan': 'Asia',\n    'Venezuela': 'South America',\n    'Vietnam': 'Asia',\n    'Yemen': 'Asia',\n    'Zambia': 'Africa',\n    'Zimbabwe': 'Africa'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/variables.js\n");

/***/ })

/******/ });